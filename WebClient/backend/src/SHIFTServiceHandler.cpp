#include "SHIFTServiceHandler.h"

#include "UserClient.h"

#include <thread>

#include <shift/coreclient/CoreClient.h>
#include <shift/coreclient/FIXInitiator.h>
#include <shift/coreclient/Order.h>

// TODO: orderSize and orderPrice do not need to be "const" (is it a requirement?)
// TODO: is it possible to make orderPrice and orderID optional? (i.e. set the parameters as double orderPrice = 0.0, const std::string& orderID = "")
// TODO: redo the comments below appropriately

/**
 * @brief Method for sending Quote to BC
 * @param orderSymbol: the stock under operation, orderID: a uuid for each order, price, shareSize, orderType: order items, username: who send the order
 * @return None
 */
void SHIFTServiceHandler::submitOrder(const std::string& username, const std::string& orderType, const std::string& orderSymbol, int32_t orderSize, double orderPrice = 0.0, const std::string& orderID = "")
// void SHIFTServiceHandler::submitOrder(const std::string& username, const std::string& orderType, const std::string& orderSymbol, const int32_t orderSize, const double orderPrice, const std::string& orderID)
{
    shift::Order::Type type = shift::Order::Type(orderType[0]);
    shift::Order order(type, orderSymbol, orderSize, orderPrice); // new order IDs are generated by the constructor of Order
    if (type == shift::Order::Type::CANCEL_BID || type == shift::Order::Type::CANCEL_ASK) {
        order.setID(orderID);
    }
    shift::CoreClient* ccptr = shift::FIXInitiator::getInstance().getClient(username);
    if (ccptr)
        ccptr->submitOrder(order);
}

/**
 * @brief Method for sending current username to frontend
 * @param username: the current user who is operating on WebClient
 * @return None
 */
void SHIFTServiceHandler::webUserLogin(const std::string& username)
{
    if (username == "")
        return;

    try {
        shift::FIXInitiator::getInstance().getClient(username);
        shift::FIXInitiator::getInstance().webClientSendUsername(username);
    } catch (...) {
        shift::CoreClient* ccptr = new UserClient(username);
        shift::FIXInitiator::getInstance().attach(ccptr);
    }
}

void SHIFTServiceHandler::webClientSendUsername(const std::string& username)
{
    return;
}

// /**
//  * @brief Method to start a strategy on the backend
//  * @param stockName, orderID, price, shareSize, orderType: order items, username: name of user who starts a strategy, interval: the time period of dummy strategy
//  * @return None
//  */
// void SHIFTServiceHandler::startStrategy(const std::string& stockName, const double price, const int32_t shareSize, const std::string& orderType, const std::string& username, const int32_t interval)
// {
//     printf("In startStrategy\n");
//     std::thread t1(&SHIFTServiceHandler::DummyStrategy, this, stockName, price, shareSize, orderType, username, interval);
//     t1.detach();
//     printf("Out startStrategy");
// }

// /**
//  * @brief Dummy strategy function that send quote to the BC, called periodically by the startStrategy
//  */
// void SHIFTServiceHandler::DummyStrategy(const std::string& stockName, const double price, const int32_t shareSize, const std::string& orderType, const std::string& username, const int32_t interval)
// {
//     printf("startStrategy\n");
//     int num = 0;
//     std::string sufix = "_";
//     for (int32_t i = 0; i < 20; i++) {
//         sufix = "_" + std::to_string(num);
//         num++;
//         submitOrder(stockName, "", price, shareSize, orderType, username);
//         sleep(interval / 1000);
//     }
// }
