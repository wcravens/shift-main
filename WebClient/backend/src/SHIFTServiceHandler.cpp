#include "SHIFTServiceHandler.h"

#include "UserClient.h"

#include <thread>

#include <shift/coreclient/CoreClient.h>
#include <shift/coreclient/FIXInitiator.h>
#include <shift/coreclient/Order.h>

#include "DBConnector.h"

/**
 * @brief Method for submitting orders to BC.
 */
void SHIFTServiceHandler::submitOrder(const std::string& username, const std::string& orderType, const std::string& orderSymbol, int32_t orderSize, double orderPrice = 0.0, const std::string& orderID = "")
{
    shift::Order::Type type = shift::Order::Type(orderType[0]);
    shift::Order order(type, orderSymbol, orderSize, orderPrice); // new order IDs are generated by the constructor of Order
    if (type == shift::Order::Type::CANCEL_BID || type == shift::Order::Type::CANCEL_ASK) {
        order.setID(orderID);
    }
    shift::CoreClient* ccptr = shift::FIXInitiator::getInstance().getClient(username);
    if (ccptr)
        ccptr->submitOrder(order);
}

int SHIFTServiceHandler::getAllTraders(){
    this->incrementor += 1;
    std::cout << "Hello from shift!" << std::endl;
    return this->incrementor;
}

/**
 * @brief Method for sending current username to frontend.
 * @param username The current user who is operating on WebClient.
 */
void SHIFTServiceHandler::webUserLogin(const std::string& username)
{
    if (username == "")
        return;

    try {
        shift::FIXInitiator::getInstance().getClient(username);
    } catch (...) {
        shift::CoreClient* ccptr = new UserClient(username);
        shift::FIXInitiator::getInstance().attachClient(ccptr);
    }
}

void SHIFTServiceHandler::webClientSendUsername(const std::string& username)
{
    return;
}
