/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SHIFTService_H
#define SHIFTService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "shift_service_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SHIFTServiceIf {
 public:
  virtual ~SHIFTServiceIf() {}
  virtual void submitOrder(const std::string& username, const std::string& orderType, const std::string& orderSymbol, const int32_t orderSize, const double orderPrice, const std::string& orderID) = 0;
  virtual void webClientSendUsername(const std::string& username) = 0;
  virtual void webUserLoginV2(std::string& _return, const std::string& username, const std::string& password) = 0;
  virtual void webUserLogin(const std::string& username) = 0;
  virtual void getAllTraders(std::string& _return) = 0;
  virtual void getThisLeaderboard(std::string& _return, const std::string& startDate, const std::string& endDate) = 0;
};

class SHIFTServiceIfFactory {
 public:
  typedef SHIFTServiceIf Handler;

  virtual ~SHIFTServiceIfFactory() {}

  virtual SHIFTServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SHIFTServiceIf* /* handler */) = 0;
};

class SHIFTServiceIfSingletonFactory : virtual public SHIFTServiceIfFactory {
 public:
  SHIFTServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<SHIFTServiceIf>& iface) : iface_(iface) {}
  virtual ~SHIFTServiceIfSingletonFactory() {}

  virtual SHIFTServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SHIFTServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<SHIFTServiceIf> iface_;
};

class SHIFTServiceNull : virtual public SHIFTServiceIf {
 public:
  virtual ~SHIFTServiceNull() {}
  void submitOrder(const std::string& /* username */, const std::string& /* orderType */, const std::string& /* orderSymbol */, const int32_t /* orderSize */, const double /* orderPrice */, const std::string& /* orderID */) {
    return;
  }
  void webClientSendUsername(const std::string& /* username */) {
    return;
  }
  void webUserLoginV2(std::string& /* _return */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void webUserLogin(const std::string& /* username */) {
    return;
  }
  void getAllTraders(std::string& /* _return */) {
    return;
  }
  void getThisLeaderboard(std::string& /* _return */, const std::string& /* startDate */, const std::string& /* endDate */) {
    return;
  }
};

typedef struct _SHIFTService_submitOrder_args__isset {
  _SHIFTService_submitOrder_args__isset() : username(false), orderType(false), orderSymbol(false), orderSize(false), orderPrice(false), orderID(false) {}
  bool username :1;
  bool orderType :1;
  bool orderSymbol :1;
  bool orderSize :1;
  bool orderPrice :1;
  bool orderID :1;
} _SHIFTService_submitOrder_args__isset;

class SHIFTService_submitOrder_args {
 public:

  SHIFTService_submitOrder_args(const SHIFTService_submitOrder_args&);
  SHIFTService_submitOrder_args& operator=(const SHIFTService_submitOrder_args&);
  SHIFTService_submitOrder_args() : username(), orderType(), orderSymbol(), orderSize(0), orderPrice(0), orderID() {
  }

  virtual ~SHIFTService_submitOrder_args() throw();
  std::string username;
  std::string orderType;
  std::string orderSymbol;
  int32_t orderSize;
  double orderPrice;
  std::string orderID;

  _SHIFTService_submitOrder_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_orderType(const std::string& val);

  void __set_orderSymbol(const std::string& val);

  void __set_orderSize(const int32_t val);

  void __set_orderPrice(const double val);

  void __set_orderID(const std::string& val);

  bool operator == (const SHIFTService_submitOrder_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(orderType == rhs.orderType))
      return false;
    if (!(orderSymbol == rhs.orderSymbol))
      return false;
    if (!(orderSize == rhs.orderSize))
      return false;
    if (!(orderPrice == rhs.orderPrice))
      return false;
    if (!(orderID == rhs.orderID))
      return false;
    return true;
  }
  bool operator != (const SHIFTService_submitOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_submitOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_submitOrder_pargs {
 public:


  virtual ~SHIFTService_submitOrder_pargs() throw();
  const std::string* username;
  const std::string* orderType;
  const std::string* orderSymbol;
  const int32_t* orderSize;
  const double* orderPrice;
  const std::string* orderID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_submitOrder_result {
 public:

  SHIFTService_submitOrder_result(const SHIFTService_submitOrder_result&);
  SHIFTService_submitOrder_result& operator=(const SHIFTService_submitOrder_result&);
  SHIFTService_submitOrder_result() {
  }

  virtual ~SHIFTService_submitOrder_result() throw();

  bool operator == (const SHIFTService_submitOrder_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SHIFTService_submitOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_submitOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_submitOrder_presult {
 public:


  virtual ~SHIFTService_submitOrder_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SHIFTService_webClientSendUsername_args__isset {
  _SHIFTService_webClientSendUsername_args__isset() : username(false) {}
  bool username :1;
} _SHIFTService_webClientSendUsername_args__isset;

class SHIFTService_webClientSendUsername_args {
 public:

  SHIFTService_webClientSendUsername_args(const SHIFTService_webClientSendUsername_args&);
  SHIFTService_webClientSendUsername_args& operator=(const SHIFTService_webClientSendUsername_args&);
  SHIFTService_webClientSendUsername_args() : username() {
  }

  virtual ~SHIFTService_webClientSendUsername_args() throw();
  std::string username;

  _SHIFTService_webClientSendUsername_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const SHIFTService_webClientSendUsername_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const SHIFTService_webClientSendUsername_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_webClientSendUsername_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_webClientSendUsername_pargs {
 public:


  virtual ~SHIFTService_webClientSendUsername_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_webClientSendUsername_result {
 public:

  SHIFTService_webClientSendUsername_result(const SHIFTService_webClientSendUsername_result&);
  SHIFTService_webClientSendUsername_result& operator=(const SHIFTService_webClientSendUsername_result&);
  SHIFTService_webClientSendUsername_result() {
  }

  virtual ~SHIFTService_webClientSendUsername_result() throw();

  bool operator == (const SHIFTService_webClientSendUsername_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SHIFTService_webClientSendUsername_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_webClientSendUsername_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_webClientSendUsername_presult {
 public:


  virtual ~SHIFTService_webClientSendUsername_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SHIFTService_webUserLoginV2_args__isset {
  _SHIFTService_webUserLoginV2_args__isset() : username(false), password(false) {}
  bool username :1;
  bool password :1;
} _SHIFTService_webUserLoginV2_args__isset;

class SHIFTService_webUserLoginV2_args {
 public:

  SHIFTService_webUserLoginV2_args(const SHIFTService_webUserLoginV2_args&);
  SHIFTService_webUserLoginV2_args& operator=(const SHIFTService_webUserLoginV2_args&);
  SHIFTService_webUserLoginV2_args() : username(), password() {
  }

  virtual ~SHIFTService_webUserLoginV2_args() throw();
  std::string username;
  std::string password;

  _SHIFTService_webUserLoginV2_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const SHIFTService_webUserLoginV2_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const SHIFTService_webUserLoginV2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_webUserLoginV2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_webUserLoginV2_pargs {
 public:


  virtual ~SHIFTService_webUserLoginV2_pargs() throw();
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SHIFTService_webUserLoginV2_result__isset {
  _SHIFTService_webUserLoginV2_result__isset() : success(false) {}
  bool success :1;
} _SHIFTService_webUserLoginV2_result__isset;

class SHIFTService_webUserLoginV2_result {
 public:

  SHIFTService_webUserLoginV2_result(const SHIFTService_webUserLoginV2_result&);
  SHIFTService_webUserLoginV2_result& operator=(const SHIFTService_webUserLoginV2_result&);
  SHIFTService_webUserLoginV2_result() : success() {
  }

  virtual ~SHIFTService_webUserLoginV2_result() throw();
  std::string success;

  _SHIFTService_webUserLoginV2_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const SHIFTService_webUserLoginV2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SHIFTService_webUserLoginV2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_webUserLoginV2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SHIFTService_webUserLoginV2_presult__isset {
  _SHIFTService_webUserLoginV2_presult__isset() : success(false) {}
  bool success :1;
} _SHIFTService_webUserLoginV2_presult__isset;

class SHIFTService_webUserLoginV2_presult {
 public:


  virtual ~SHIFTService_webUserLoginV2_presult() throw();
  std::string* success;

  _SHIFTService_webUserLoginV2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SHIFTService_webUserLogin_args__isset {
  _SHIFTService_webUserLogin_args__isset() : username(false) {}
  bool username :1;
} _SHIFTService_webUserLogin_args__isset;

class SHIFTService_webUserLogin_args {
 public:

  SHIFTService_webUserLogin_args(const SHIFTService_webUserLogin_args&);
  SHIFTService_webUserLogin_args& operator=(const SHIFTService_webUserLogin_args&);
  SHIFTService_webUserLogin_args() : username() {
  }

  virtual ~SHIFTService_webUserLogin_args() throw();
  std::string username;

  _SHIFTService_webUserLogin_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const SHIFTService_webUserLogin_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const SHIFTService_webUserLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_webUserLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_webUserLogin_pargs {
 public:


  virtual ~SHIFTService_webUserLogin_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_webUserLogin_result {
 public:

  SHIFTService_webUserLogin_result(const SHIFTService_webUserLogin_result&);
  SHIFTService_webUserLogin_result& operator=(const SHIFTService_webUserLogin_result&);
  SHIFTService_webUserLogin_result() {
  }

  virtual ~SHIFTService_webUserLogin_result() throw();

  bool operator == (const SHIFTService_webUserLogin_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SHIFTService_webUserLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_webUserLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_webUserLogin_presult {
 public:


  virtual ~SHIFTService_webUserLogin_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SHIFTService_getAllTraders_args {
 public:

  SHIFTService_getAllTraders_args(const SHIFTService_getAllTraders_args&);
  SHIFTService_getAllTraders_args& operator=(const SHIFTService_getAllTraders_args&);
  SHIFTService_getAllTraders_args() {
  }

  virtual ~SHIFTService_getAllTraders_args() throw();

  bool operator == (const SHIFTService_getAllTraders_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SHIFTService_getAllTraders_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_getAllTraders_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_getAllTraders_pargs {
 public:


  virtual ~SHIFTService_getAllTraders_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SHIFTService_getAllTraders_result__isset {
  _SHIFTService_getAllTraders_result__isset() : success(false) {}
  bool success :1;
} _SHIFTService_getAllTraders_result__isset;

class SHIFTService_getAllTraders_result {
 public:

  SHIFTService_getAllTraders_result(const SHIFTService_getAllTraders_result&);
  SHIFTService_getAllTraders_result& operator=(const SHIFTService_getAllTraders_result&);
  SHIFTService_getAllTraders_result() : success() {
  }

  virtual ~SHIFTService_getAllTraders_result() throw();
  std::string success;

  _SHIFTService_getAllTraders_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const SHIFTService_getAllTraders_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SHIFTService_getAllTraders_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_getAllTraders_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SHIFTService_getAllTraders_presult__isset {
  _SHIFTService_getAllTraders_presult__isset() : success(false) {}
  bool success :1;
} _SHIFTService_getAllTraders_presult__isset;

class SHIFTService_getAllTraders_presult {
 public:


  virtual ~SHIFTService_getAllTraders_presult() throw();
  std::string* success;

  _SHIFTService_getAllTraders_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SHIFTService_getThisLeaderboard_args__isset {
  _SHIFTService_getThisLeaderboard_args__isset() : startDate(true), endDate(true) {}
  bool startDate :1;
  bool endDate :1;
} _SHIFTService_getThisLeaderboard_args__isset;

class SHIFTService_getThisLeaderboard_args {
 public:

  SHIFTService_getThisLeaderboard_args(const SHIFTService_getThisLeaderboard_args&);
  SHIFTService_getThisLeaderboard_args& operator=(const SHIFTService_getThisLeaderboard_args&);
  SHIFTService_getThisLeaderboard_args() : startDate(""), endDate("") {
  }

  virtual ~SHIFTService_getThisLeaderboard_args() throw();
  std::string startDate;
  std::string endDate;

  _SHIFTService_getThisLeaderboard_args__isset __isset;

  void __set_startDate(const std::string& val);

  void __set_endDate(const std::string& val);

  bool operator == (const SHIFTService_getThisLeaderboard_args & rhs) const
  {
    if (!(startDate == rhs.startDate))
      return false;
    if (!(endDate == rhs.endDate))
      return false;
    return true;
  }
  bool operator != (const SHIFTService_getThisLeaderboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_getThisLeaderboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SHIFTService_getThisLeaderboard_pargs {
 public:


  virtual ~SHIFTService_getThisLeaderboard_pargs() throw();
  const std::string* startDate;
  const std::string* endDate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SHIFTService_getThisLeaderboard_result__isset {
  _SHIFTService_getThisLeaderboard_result__isset() : success(false) {}
  bool success :1;
} _SHIFTService_getThisLeaderboard_result__isset;

class SHIFTService_getThisLeaderboard_result {
 public:

  SHIFTService_getThisLeaderboard_result(const SHIFTService_getThisLeaderboard_result&);
  SHIFTService_getThisLeaderboard_result& operator=(const SHIFTService_getThisLeaderboard_result&);
  SHIFTService_getThisLeaderboard_result() : success() {
  }

  virtual ~SHIFTService_getThisLeaderboard_result() throw();
  std::string success;

  _SHIFTService_getThisLeaderboard_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const SHIFTService_getThisLeaderboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SHIFTService_getThisLeaderboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SHIFTService_getThisLeaderboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SHIFTService_getThisLeaderboard_presult__isset {
  _SHIFTService_getThisLeaderboard_presult__isset() : success(false) {}
  bool success :1;
} _SHIFTService_getThisLeaderboard_presult__isset;

class SHIFTService_getThisLeaderboard_presult {
 public:


  virtual ~SHIFTService_getThisLeaderboard_presult() throw();
  std::string* success;

  _SHIFTService_getThisLeaderboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SHIFTServiceClient : virtual public SHIFTServiceIf {
 public:
  SHIFTServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SHIFTServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void submitOrder(const std::string& username, const std::string& orderType, const std::string& orderSymbol, const int32_t orderSize, const double orderPrice, const std::string& orderID);
  void send_submitOrder(const std::string& username, const std::string& orderType, const std::string& orderSymbol, const int32_t orderSize, const double orderPrice, const std::string& orderID);
  void recv_submitOrder();
  void webClientSendUsername(const std::string& username);
  void send_webClientSendUsername(const std::string& username);
  void recv_webClientSendUsername();
  void webUserLoginV2(std::string& _return, const std::string& username, const std::string& password);
  void send_webUserLoginV2(const std::string& username, const std::string& password);
  void recv_webUserLoginV2(std::string& _return);
  void webUserLogin(const std::string& username);
  void send_webUserLogin(const std::string& username);
  void recv_webUserLogin();
  void getAllTraders(std::string& _return);
  void send_getAllTraders();
  void recv_getAllTraders(std::string& _return);
  void getThisLeaderboard(std::string& _return, const std::string& startDate, const std::string& endDate);
  void send_getThisLeaderboard(const std::string& startDate, const std::string& endDate);
  void recv_getThisLeaderboard(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SHIFTServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<SHIFTServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SHIFTServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_submitOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_webClientSendUsername(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_webUserLoginV2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_webUserLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllTraders(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getThisLeaderboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SHIFTServiceProcessor(::apache::thrift::stdcxx::shared_ptr<SHIFTServiceIf> iface) :
    iface_(iface) {
    processMap_["submitOrder"] = &SHIFTServiceProcessor::process_submitOrder;
    processMap_["webClientSendUsername"] = &SHIFTServiceProcessor::process_webClientSendUsername;
    processMap_["webUserLoginV2"] = &SHIFTServiceProcessor::process_webUserLoginV2;
    processMap_["webUserLogin"] = &SHIFTServiceProcessor::process_webUserLogin;
    processMap_["getAllTraders"] = &SHIFTServiceProcessor::process_getAllTraders;
    processMap_["getThisLeaderboard"] = &SHIFTServiceProcessor::process_getThisLeaderboard;
  }

  virtual ~SHIFTServiceProcessor() {}
};

class SHIFTServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SHIFTServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< SHIFTServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< SHIFTServiceIfFactory > handlerFactory_;
};

class SHIFTServiceMultiface : virtual public SHIFTServiceIf {
 public:
  SHIFTServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<SHIFTServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SHIFTServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<SHIFTServiceIf> > ifaces_;
  SHIFTServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<SHIFTServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void submitOrder(const std::string& username, const std::string& orderType, const std::string& orderSymbol, const int32_t orderSize, const double orderPrice, const std::string& orderID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submitOrder(username, orderType, orderSymbol, orderSize, orderPrice, orderID);
    }
    ifaces_[i]->submitOrder(username, orderType, orderSymbol, orderSize, orderPrice, orderID);
  }

  void webClientSendUsername(const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->webClientSendUsername(username);
    }
    ifaces_[i]->webClientSendUsername(username);
  }

  void webUserLoginV2(std::string& _return, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->webUserLoginV2(_return, username, password);
    }
    ifaces_[i]->webUserLoginV2(_return, username, password);
    return;
  }

  void webUserLogin(const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->webUserLogin(username);
    }
    ifaces_[i]->webUserLogin(username);
  }

  void getAllTraders(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllTraders(_return);
    }
    ifaces_[i]->getAllTraders(_return);
    return;
  }

  void getThisLeaderboard(std::string& _return, const std::string& startDate, const std::string& endDate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getThisLeaderboard(_return, startDate, endDate);
    }
    ifaces_[i]->getThisLeaderboard(_return, startDate, endDate);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SHIFTServiceConcurrentClient : virtual public SHIFTServiceIf {
 public:
  SHIFTServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SHIFTServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void submitOrder(const std::string& username, const std::string& orderType, const std::string& orderSymbol, const int32_t orderSize, const double orderPrice, const std::string& orderID);
  int32_t send_submitOrder(const std::string& username, const std::string& orderType, const std::string& orderSymbol, const int32_t orderSize, const double orderPrice, const std::string& orderID);
  void recv_submitOrder(const int32_t seqid);
  void webClientSendUsername(const std::string& username);
  int32_t send_webClientSendUsername(const std::string& username);
  void recv_webClientSendUsername(const int32_t seqid);
  void webUserLoginV2(std::string& _return, const std::string& username, const std::string& password);
  int32_t send_webUserLoginV2(const std::string& username, const std::string& password);
  void recv_webUserLoginV2(std::string& _return, const int32_t seqid);
  void webUserLogin(const std::string& username);
  int32_t send_webUserLogin(const std::string& username);
  void recv_webUserLogin(const int32_t seqid);
  void getAllTraders(std::string& _return);
  int32_t send_getAllTraders();
  void recv_getAllTraders(std::string& _return, const int32_t seqid);
  void getThisLeaderboard(std::string& _return, const std::string& startDate, const std::string& endDate);
  int32_t send_getThisLeaderboard(const std::string& startDate, const std::string& endDate);
  void recv_getThisLeaderboard(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
